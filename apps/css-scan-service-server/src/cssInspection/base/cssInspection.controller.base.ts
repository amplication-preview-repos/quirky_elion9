/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CssInspectionService } from "../cssInspection.service";
import { CssInspectionCreateInput } from "./CssInspectionCreateInput";
import { CssInspection } from "./CssInspection";
import { CssInspectionFindManyArgs } from "./CssInspectionFindManyArgs";
import { CssInspectionWhereUniqueInput } from "./CssInspectionWhereUniqueInput";
import { CssInspectionUpdateInput } from "./CssInspectionUpdateInput";

export class CssInspectionControllerBase {
  constructor(protected readonly service: CssInspectionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CssInspection })
  async createCssInspection(
    @common.Body() data: CssInspectionCreateInput
  ): Promise<CssInspection> {
    return await this.service.createCssInspection({
      data: data,
      select: {
        createdAt: true,
        cssProperties: true,
        elementSelector: true,
        id: true,
        inspectedAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CssInspection] })
  @ApiNestedQuery(CssInspectionFindManyArgs)
  async cssInspections(
    @common.Req() request: Request
  ): Promise<CssInspection[]> {
    const args = plainToClass(CssInspectionFindManyArgs, request.query);
    return this.service.cssInspections({
      ...args,
      select: {
        createdAt: true,
        cssProperties: true,
        elementSelector: true,
        id: true,
        inspectedAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CssInspection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cssInspection(
    @common.Param() params: CssInspectionWhereUniqueInput
  ): Promise<CssInspection | null> {
    const result = await this.service.cssInspection({
      where: params,
      select: {
        createdAt: true,
        cssProperties: true,
        elementSelector: true,
        id: true,
        inspectedAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CssInspection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCssInspection(
    @common.Param() params: CssInspectionWhereUniqueInput,
    @common.Body() data: CssInspectionUpdateInput
  ): Promise<CssInspection | null> {
    try {
      return await this.service.updateCssInspection({
        where: params,
        data: data,
        select: {
          createdAt: true,
          cssProperties: true,
          elementSelector: true,
          id: true,
          inspectedAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CssInspection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCssInspection(
    @common.Param() params: CssInspectionWhereUniqueInput
  ): Promise<CssInspection | null> {
    try {
      return await this.service.deleteCssInspection({
        where: params,
        select: {
          createdAt: true,
          cssProperties: true,
          elementSelector: true,
          id: true,
          inspectedAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
