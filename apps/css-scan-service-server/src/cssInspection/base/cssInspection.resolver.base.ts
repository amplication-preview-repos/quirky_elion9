/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CssInspection } from "./CssInspection";
import { CssInspectionCountArgs } from "./CssInspectionCountArgs";
import { CssInspectionFindManyArgs } from "./CssInspectionFindManyArgs";
import { CssInspectionFindUniqueArgs } from "./CssInspectionFindUniqueArgs";
import { CreateCssInspectionArgs } from "./CreateCssInspectionArgs";
import { UpdateCssInspectionArgs } from "./UpdateCssInspectionArgs";
import { DeleteCssInspectionArgs } from "./DeleteCssInspectionArgs";
import { CssInspectionService } from "../cssInspection.service";
@graphql.Resolver(() => CssInspection)
export class CssInspectionResolverBase {
  constructor(protected readonly service: CssInspectionService) {}

  async _cssInspectionsMeta(
    @graphql.Args() args: CssInspectionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CssInspection])
  async cssInspections(
    @graphql.Args() args: CssInspectionFindManyArgs
  ): Promise<CssInspection[]> {
    return this.service.cssInspections(args);
  }

  @graphql.Query(() => CssInspection, { nullable: true })
  async cssInspection(
    @graphql.Args() args: CssInspectionFindUniqueArgs
  ): Promise<CssInspection | null> {
    const result = await this.service.cssInspection(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CssInspection)
  async createCssInspection(
    @graphql.Args() args: CreateCssInspectionArgs
  ): Promise<CssInspection> {
    return await this.service.createCssInspection({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CssInspection)
  async updateCssInspection(
    @graphql.Args() args: UpdateCssInspectionArgs
  ): Promise<CssInspection | null> {
    try {
      return await this.service.updateCssInspection({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CssInspection)
  async deleteCssInspection(
    @graphql.Args() args: DeleteCssInspectionArgs
  ): Promise<CssInspection | null> {
    try {
      return await this.service.deleteCssInspection(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
