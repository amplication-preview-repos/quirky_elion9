/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CssInspection as PrismaCssInspection } from "@prisma/client";

export class CssInspectionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CssInspectionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.cssInspection.count(args);
  }

  async cssInspections(
    args: Prisma.CssInspectionFindManyArgs
  ): Promise<PrismaCssInspection[]> {
    return this.prisma.cssInspection.findMany(args);
  }
  async cssInspection(
    args: Prisma.CssInspectionFindUniqueArgs
  ): Promise<PrismaCssInspection | null> {
    return this.prisma.cssInspection.findUnique(args);
  }
  async createCssInspection(
    args: Prisma.CssInspectionCreateArgs
  ): Promise<PrismaCssInspection> {
    return this.prisma.cssInspection.create(args);
  }
  async updateCssInspection(
    args: Prisma.CssInspectionUpdateArgs
  ): Promise<PrismaCssInspection> {
    return this.prisma.cssInspection.update(args);
  }
  async deleteCssInspection(
    args: Prisma.CssInspectionDeleteArgs
  ): Promise<PrismaCssInspection> {
    return this.prisma.cssInspection.delete(args);
  }
}
