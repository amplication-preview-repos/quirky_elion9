/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StyleCopyService } from "../styleCopy.service";
import { StyleCopyCreateInput } from "./StyleCopyCreateInput";
import { StyleCopy } from "./StyleCopy";
import { StyleCopyFindManyArgs } from "./StyleCopyFindManyArgs";
import { StyleCopyWhereUniqueInput } from "./StyleCopyWhereUniqueInput";
import { StyleCopyUpdateInput } from "./StyleCopyUpdateInput";

export class StyleCopyControllerBase {
  constructor(protected readonly service: StyleCopyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StyleCopy })
  async createStyleCopy(
    @common.Body() data: StyleCopyCreateInput
  ): Promise<StyleCopy> {
    return await this.service.createStyleCopy({
      data: data,
      select: {
        copiedAt: true,
        copiedCss: true,
        createdAt: true,
        elementSelector: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StyleCopy] })
  @ApiNestedQuery(StyleCopyFindManyArgs)
  async styleCopies(@common.Req() request: Request): Promise<StyleCopy[]> {
    const args = plainToClass(StyleCopyFindManyArgs, request.query);
    return this.service.styleCopies({
      ...args,
      select: {
        copiedAt: true,
        copiedCss: true,
        createdAt: true,
        elementSelector: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StyleCopy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async styleCopy(
    @common.Param() params: StyleCopyWhereUniqueInput
  ): Promise<StyleCopy | null> {
    const result = await this.service.styleCopy({
      where: params,
      select: {
        copiedAt: true,
        copiedCss: true,
        createdAt: true,
        elementSelector: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StyleCopy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStyleCopy(
    @common.Param() params: StyleCopyWhereUniqueInput,
    @common.Body() data: StyleCopyUpdateInput
  ): Promise<StyleCopy | null> {
    try {
      return await this.service.updateStyleCopy({
        where: params,
        data: data,
        select: {
          copiedAt: true,
          copiedCss: true,
          createdAt: true,
          elementSelector: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StyleCopy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStyleCopy(
    @common.Param() params: StyleCopyWhereUniqueInput
  ): Promise<StyleCopy | null> {
    try {
      return await this.service.deleteStyleCopy({
        where: params,
        select: {
          copiedAt: true,
          copiedCss: true,
          createdAt: true,
          elementSelector: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
