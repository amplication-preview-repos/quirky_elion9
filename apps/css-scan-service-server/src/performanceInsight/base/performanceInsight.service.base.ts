/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PerformanceInsight as PrismaPerformanceInsight,
} from "@prisma/client";

export class PerformanceInsightServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PerformanceInsightCountArgs, "select">
  ): Promise<number> {
    return this.prisma.performanceInsight.count(args);
  }

  async performanceInsights(
    args: Prisma.PerformanceInsightFindManyArgs
  ): Promise<PrismaPerformanceInsight[]> {
    return this.prisma.performanceInsight.findMany(args);
  }
  async performanceInsight(
    args: Prisma.PerformanceInsightFindUniqueArgs
  ): Promise<PrismaPerformanceInsight | null> {
    return this.prisma.performanceInsight.findUnique(args);
  }
  async createPerformanceInsight(
    args: Prisma.PerformanceInsightCreateArgs
  ): Promise<PrismaPerformanceInsight> {
    return this.prisma.performanceInsight.create(args);
  }
  async updatePerformanceInsight(
    args: Prisma.PerformanceInsightUpdateArgs
  ): Promise<PrismaPerformanceInsight> {
    return this.prisma.performanceInsight.update(args);
  }
  async deletePerformanceInsight(
    args: Prisma.PerformanceInsightDeleteArgs
  ): Promise<PrismaPerformanceInsight> {
    return this.prisma.performanceInsight.delete(args);
  }
}
