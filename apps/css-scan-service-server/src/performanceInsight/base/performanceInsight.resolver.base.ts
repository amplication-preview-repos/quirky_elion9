/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PerformanceInsight } from "./PerformanceInsight";
import { PerformanceInsightCountArgs } from "./PerformanceInsightCountArgs";
import { PerformanceInsightFindManyArgs } from "./PerformanceInsightFindManyArgs";
import { PerformanceInsightFindUniqueArgs } from "./PerformanceInsightFindUniqueArgs";
import { CreatePerformanceInsightArgs } from "./CreatePerformanceInsightArgs";
import { UpdatePerformanceInsightArgs } from "./UpdatePerformanceInsightArgs";
import { DeletePerformanceInsightArgs } from "./DeletePerformanceInsightArgs";
import { PerformanceInsightService } from "../performanceInsight.service";
@graphql.Resolver(() => PerformanceInsight)
export class PerformanceInsightResolverBase {
  constructor(protected readonly service: PerformanceInsightService) {}

  async _performanceInsightsMeta(
    @graphql.Args() args: PerformanceInsightCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PerformanceInsight])
  async performanceInsights(
    @graphql.Args() args: PerformanceInsightFindManyArgs
  ): Promise<PerformanceInsight[]> {
    return this.service.performanceInsights(args);
  }

  @graphql.Query(() => PerformanceInsight, { nullable: true })
  async performanceInsight(
    @graphql.Args() args: PerformanceInsightFindUniqueArgs
  ): Promise<PerformanceInsight | null> {
    const result = await this.service.performanceInsight(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PerformanceInsight)
  async createPerformanceInsight(
    @graphql.Args() args: CreatePerformanceInsightArgs
  ): Promise<PerformanceInsight> {
    return await this.service.createPerformanceInsight({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PerformanceInsight)
  async updatePerformanceInsight(
    @graphql.Args() args: UpdatePerformanceInsightArgs
  ): Promise<PerformanceInsight | null> {
    try {
      return await this.service.updatePerformanceInsight({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PerformanceInsight)
  async deletePerformanceInsight(
    @graphql.Args() args: DeletePerformanceInsightArgs
  ): Promise<PerformanceInsight | null> {
    try {
      return await this.service.deletePerformanceInsight(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
