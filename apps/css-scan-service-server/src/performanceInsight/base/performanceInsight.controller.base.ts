/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PerformanceInsightService } from "../performanceInsight.service";
import { PerformanceInsightCreateInput } from "./PerformanceInsightCreateInput";
import { PerformanceInsight } from "./PerformanceInsight";
import { PerformanceInsightFindManyArgs } from "./PerformanceInsightFindManyArgs";
import { PerformanceInsightWhereUniqueInput } from "./PerformanceInsightWhereUniqueInput";
import { PerformanceInsightUpdateInput } from "./PerformanceInsightUpdateInput";

export class PerformanceInsightControllerBase {
  constructor(protected readonly service: PerformanceInsightService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PerformanceInsight })
  async createPerformanceInsight(
    @common.Body() data: PerformanceInsightCreateInput
  ): Promise<PerformanceInsight> {
    return await this.service.createPerformanceInsight({
      data: data,
      select: {
        createdAt: true,
        id: true,
        metricName: true,
        recordedAt: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PerformanceInsight] })
  @ApiNestedQuery(PerformanceInsightFindManyArgs)
  async performanceInsights(
    @common.Req() request: Request
  ): Promise<PerformanceInsight[]> {
    const args = plainToClass(PerformanceInsightFindManyArgs, request.query);
    return this.service.performanceInsights({
      ...args,
      select: {
        createdAt: true,
        id: true,
        metricName: true,
        recordedAt: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PerformanceInsight })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async performanceInsight(
    @common.Param() params: PerformanceInsightWhereUniqueInput
  ): Promise<PerformanceInsight | null> {
    const result = await this.service.performanceInsight({
      where: params,
      select: {
        createdAt: true,
        id: true,
        metricName: true,
        recordedAt: true,
        updatedAt: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PerformanceInsight })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePerformanceInsight(
    @common.Param() params: PerformanceInsightWhereUniqueInput,
    @common.Body() data: PerformanceInsightUpdateInput
  ): Promise<PerformanceInsight | null> {
    try {
      return await this.service.updatePerformanceInsight({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          metricName: true,
          recordedAt: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PerformanceInsight })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePerformanceInsight(
    @common.Param() params: PerformanceInsightWhereUniqueInput
  ): Promise<PerformanceInsight | null> {
    try {
      return await this.service.deletePerformanceInsight({
        where: params,
        select: {
          createdAt: true,
          id: true,
          metricName: true,
          recordedAt: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
